{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Table of Contents: Installation Compiling Variables Functions Features TL;DR","title":"Contents"},{"location":"Compiling/","text":"Compiling A Program (note, your file should end in .mochaccino) To compile a program, first follow the installation instructions, then make sure you're in the directory with the uncompiled file, then do: mochacompile YOURFILENAME Then follow on-screen instructions. Make sure when compiling, you don't put the file prefix. (it's assumed that it's .mochaccino )","title":"Compiling"},{"location":"Compiling/#compiling-a-program","text":"(note, your file should end in .mochaccino) To compile a program, first follow the installation instructions, then make sure you're in the directory with the uncompiled file, then do: mochacompile YOURFILENAME Then follow on-screen instructions. Make sure when compiling, you don't put the file prefix. (it's assumed that it's .mochaccino )","title":"Compiling A Program"},{"location":"Features/","text":"Features The following are features included by default in mochaccino without modules. preach - takes one argument, prints to console (the window it runs in) order - denotes the start of an order (function, but order is easy to understand, like an order of what to do, or a food order of commands), see Functions various math features, see: Variables","title":"Features"},{"location":"Features/#features","text":"The following are features included by default in mochaccino without modules. preach - takes one argument, prints to console (the window it runs in) order - denotes the start of an order (function, but order is easy to understand, like an order of what to do, or a food order of commands), see Functions various math features, see: Variables","title":"Features"},{"location":"Functions/","text":"Functions Here's an example of a hello world function. order helloworld { preach \"helloworld\" } The prefered way to make a function is to use the order expression. order and then your function name, followed by curly brackets containing your code (indented). We use the word order, because it's almost like ordering the computer to do something, or because it's like an order of food items (commands) you would give at a restaraunt.","title":"Functions"},{"location":"Functions/#functions","text":"Here's an example of a hello world function. order helloworld { preach \"helloworld\" } The prefered way to make a function is to use the order expression. order and then your function name, followed by curly brackets containing your code (indented). We use the word order, because it's almost like ordering the computer to do something, or because it's like an order of food items (commands) you would give at a restaraunt.","title":"Functions"},{"location":"Installation/","text":"How to Install Mochaccino Requirements: Linux terminal in windows (this was made with the ubuntu terminal), Linux subsystem for windows turned on, dos2unix ( apt-get install dos2unix ), nodejs ( apt-get install nodejs ), Installation First, cd into the disk you want to install on (for most it's c) cd /mnt/c/ Next, make the source for Mochaccino git clone https://github.com/mochaccino-lang/mochaccino.git Now you have to make an alias for the compiler, a guide is here: https://www.hostingadvice.com/how-to/set-command-aliases-linuxubuntudebian/ set the name to 'mochacompile', and set inside the quotes to be ' node /mnt/c/mochaccino/src/compiler.js ' You've successfully installed Mochaccino! If you're installing on ubuntu or another linux distro, just take the first two off of the requirements","title":"Installation"},{"location":"Installation/#how-to-install-mochaccino","text":"","title":"How to Install Mochaccino"},{"location":"Installation/#requirements","text":"Linux terminal in windows (this was made with the ubuntu terminal), Linux subsystem for windows turned on, dos2unix ( apt-get install dos2unix ), nodejs ( apt-get install nodejs ),","title":"Requirements: "},{"location":"Installation/#installation","text":"First, cd into the disk you want to install on (for most it's c) cd /mnt/c/ Next, make the source for Mochaccino git clone https://github.com/mochaccino-lang/mochaccino.git Now you have to make an alias for the compiler, a guide is here: https://www.hostingadvice.com/how-to/set-command-aliases-linuxubuntudebian/ set the name to 'mochacompile', and set inside the quotes to be ' node /mnt/c/mochaccino/src/compiler.js ' You've successfully installed Mochaccino! If you're installing on ubuntu or another linux distro, just take the first two off of the requirements","title":"Installation"},{"location":"TLDR/","text":"TL;DR it's a espteric knockoff of bash for basic bitches that compiles into bash where there's a feature for implementing packages and echo is replaced with preach, the $ is replaced with \"..like\" and function is replaced with order. Also a lot of complicated functions have been stripped away to make it seem high level when actually it's simpler than c, in both complexity and ease of use. fuck off if you're not about it","title":"TL;DR"},{"location":"TLDR/#tldr","text":"it's a espteric knockoff of bash for basic bitches that compiles into bash where there's a feature for implementing packages and echo is replaced with preach, the $ is replaced with \"..like\" and function is replaced with order. Also a lot of complicated functions have been stripped away to make it seem high level when actually it's simpler than c, in both complexity and ease of use. fuck off if you're not about it","title":"TL;DR"},{"location":"Variables/","text":"Variables Here's an example of a variable in a hello world program: myvariable is \"hello world\" preach ..like myvariable Assigning a variable a value is done with the keyword is , and calling a variable requires the prefix ..like . Types Variables can be in 3-4 main states, though there are more complicated ones (for nerds haha). The main states are: String Integer or float Boolean A string is any character sequence, like a word or a sentence. It has to be stored within quotes. mystring is \"hello world\" An integer is any whole number (without decimals) and a float is any number (can have decimals) myinteger is 4 integer myfloat is 3.14 float A boolean is either True or False, almost like a light switch, on or off. mybool is True mybool is False Another commonly used variable type is array. An array holds a list of items, each item could be any of the states listed above. myarray is [\"Hello!\", 3, True] Math On integers and floats, you can perform mathematic operations. Let's say you wanted to add one to your variable, this is how we would do that. myinteger is ..like myinteger plus 1 So if our variable was 3, now it would be four. Here's a list of all math operations you can perform: plus - adds minus - subtracts devided by - devides times - multiplies modulo - performs the modulo operation toy - acts as += would in most languages take - acts as -= would in most languages There is a special case when preaching a math problem. `firstvariable is 10 secondvariable is 5 thirdvariable is ..like firstvariable plus ..like secondvariable preach ..like thirdvariable int` We have to tell the preach expression that it should output an integer and not a string. Alternatively, we can make the math compute in the third variable by passing the int argument first, like this: `firstvariable is 10 secondvariable is 5 int thirdvariable is ..like firstvariable plus ..like secondvariable preach ..like thirdvariable` Having these two options widens the range for string manipulation within variables and arrays. Mathematical Constants These are numbers that you might need for math? sol - speed of light pi - pi (approximated 15 digits) euler - euler's number (e, 5 digits after period) s2 - square root of 2 (65 digits) There aren't others because you can literally look them up and i'm too lazy to go through the mathematical constant wikipedia page","title":"Variables"},{"location":"Variables/#variables","text":"Here's an example of a variable in a hello world program: myvariable is \"hello world\" preach ..like myvariable Assigning a variable a value is done with the keyword is , and calling a variable requires the prefix ..like .","title":"Variables"},{"location":"Variables/#types","text":"Variables can be in 3-4 main states, though there are more complicated ones (for nerds haha). The main states are: String Integer or float Boolean A string is any character sequence, like a word or a sentence. It has to be stored within quotes. mystring is \"hello world\" An integer is any whole number (without decimals) and a float is any number (can have decimals) myinteger is 4 integer myfloat is 3.14 float A boolean is either True or False, almost like a light switch, on or off. mybool is True mybool is False Another commonly used variable type is array. An array holds a list of items, each item could be any of the states listed above. myarray is [\"Hello!\", 3, True]","title":"Types"},{"location":"Variables/#math","text":"On integers and floats, you can perform mathematic operations. Let's say you wanted to add one to your variable, this is how we would do that. myinteger is ..like myinteger plus 1 So if our variable was 3, now it would be four. Here's a list of all math operations you can perform: plus - adds minus - subtracts devided by - devides times - multiplies modulo - performs the modulo operation toy - acts as += would in most languages take - acts as -= would in most languages There is a special case when preaching a math problem. `firstvariable is 10 secondvariable is 5 thirdvariable is ..like firstvariable plus ..like secondvariable preach ..like thirdvariable int` We have to tell the preach expression that it should output an integer and not a string. Alternatively, we can make the math compute in the third variable by passing the int argument first, like this: `firstvariable is 10 secondvariable is 5 int thirdvariable is ..like firstvariable plus ..like secondvariable preach ..like thirdvariable` Having these two options widens the range for string manipulation within variables and arrays.","title":"Math"},{"location":"Variables/#mathematical-constants","text":"These are numbers that you might need for math? sol - speed of light pi - pi (approximated 15 digits) euler - euler's number (e, 5 digits after period) s2 - square root of 2 (65 digits) There aren't others because you can literally look them up and i'm too lazy to go through the mathematical constant wikipedia page","title":"Mathematical Constants"}]}